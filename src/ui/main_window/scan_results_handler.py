"""
ScanResultsHandler - obs≈Çuga wynik√≥w skanowania folder√≥w.
üöÄ ETAP 3 REFAKTORYZACJI: Wydzielenie logiki skanowania z main_window.py
"""

import logging
import os

from PyQt6.QtCore import QTimer

# Import clear_cache usuniƒôty bo nieu≈ºywany
from src.utils.path_utils import normalize_path


class ScanResultsHandler:
    """
    Manager odpowiedzialny za obs≈Çugƒô wynik√≥w skanowania folder√≥w.
    Obs≈Çuguje wyniki skanowania, b≈Çƒôdy i zmianƒô katalog√≥w.
    """

    def __init__(self, main_window):
        """
        Inicjalizuje ScanResultsHandler.

        Args:
            main_window: Referencja do g≈Ç√≥wnego okna aplikacji
        """
        self.main_window = main_window
        self.logger = logging.getLogger(__name__)

    def handle_scan_finished(
        self,
        found_pairs,
        unpaired_archives,
        unpaired_previews,
        special_folders=None,
    ):
        """
        Obs≈Çuguje wyniki po zako≈Ñczeniu skanowania w tle.
        Aktualizuje model danych i od≈õwie≈ºa widoki.

        Args:
            found_pairs: Lista znalezionych par plik√≥w
            unpaired_archives: Lista niesparowanych archiw√≥w
            unpaired_previews: Lista niesparowanych podglƒÖd√≥w
            special_folders: Lista specjalnych folder√≥w (opcjonalne)
        """
        if special_folders is None:
            special_folders = []

        # DIAGNOSTYKA
        self.logger.critical(
            f"DIAGNOSTYKA HANDLE_SCAN_FINISHED: Otrzymano "
            f"{len(special_folders)} folder√≥w specjalnych: "
            f"{special_folders}"
        )

        self.logger.debug(
            f"Skanowanie zako≈Ñczone, otrzymano: {len(found_pairs)} par, "
            f"{len(unpaired_archives)} archiw√≥w, "
            f"{len(unpaired_previews)} podglƒÖd√≥w"
        )

        # Zaktualizuj dane kontrolera
        self.main_window.controller.current_file_pairs = found_pairs
        self.main_window.controller.unpaired_archives = unpaired_archives
        self.main_window.controller.unpaired_previews = unpaired_previews
        self.main_window.controller.special_folders = special_folders

        # Od≈õwie≈º widoki
        self.main_window._apply_filters_and_update_view()

        # Aktualizuj niesparowane pliki
        if hasattr(self.main_window, "unpaired_files_tab_manager"):
            self.main_window.unpaired_files_tab_manager.update_unpaired_files_lists()

        # Poka≈º interfejs
        if hasattr(self.main_window, "filter_panel"):
            self.main_window.filter_panel.setEnabled(True)  # Odblokuj panel filtr√≥w

        is_gallery_populated = bool(self.main_window.gallery_manager.file_pairs_list)
        if hasattr(self.main_window, "size_control_panel"):
            self.main_window.size_control_panel.setVisible(is_gallery_populated)

        # Przywr√≥ƒá przycisk
        if hasattr(self.main_window, "select_folder_button"):
            self.main_window.select_folder_button.setText("Wybierz Folder Roboczy")
            self.main_window.select_folder_button.setEnabled(True)

        # Poka≈º przycisk od≈õwie≈ºania cache
        if hasattr(self.main_window, "clear_cache_button"):
            self.main_window.clear_cache_button.setVisible(True)

        # Zapisz metadane
        self.main_window._save_metadata()

        # Uruchom obliczanie statystyk folder√≥w
        if hasattr(self.main_window, "directory_tree_manager"):
            QTimer.singleShot(
                1000,
                self.main_window.directory_tree_manager.start_background_stats_calculation,
            )

        # Ustaw progress bar na 100% po zako≈Ñczeniu
        actual_tiles_count = len(self.main_window.gallery_manager.file_pairs_list)
        self.main_window.progress_manager.show_progress(
            100, f"‚úÖ Za≈Çadowano {actual_tiles_count} kafelk√≥w!"
        )

        # Kr√≥tkie op√≥≈∫nienie ≈ºeby u≈ºytkownik zobaczy≈Ç 100% przed ukryciem
        QTimer.singleShot(500, self.main_window.progress_manager.hide_progress)

        self.logger.debug(
            f"Widok zaktualizowany. Wy≈õwietlono po filtracji: {actual_tiles_count}."
        )

    def handle_scan_error(self, error_message: str):
        """
        Obs≈Çuguje b≈Çƒôdy wystƒôpujƒÖce podczas skanowania folderu.

        Args:
            error_message: Komunikat b≈Çƒôdu do wy≈õwietlenia
        """
        # Delegacja do EventHandler
        self.main_window.event_handler.handle_scan_error(error_message)

        # Przywr√≥ƒá przycisk
        if hasattr(self.main_window, "select_folder_button"):
            self.main_window.select_folder_button.setText("Wybierz Folder Roboczy")
            self.main_window.select_folder_button.setEnabled(True)

        if hasattr(self.main_window, "filter_panel"):
            self.main_window.filter_panel.setEnabled(False)  # Zablokuj przy b≈Çƒôdzie

    def change_directory(self, folder_path: str):
        """
        Zmienia bie≈ºƒÖcy katalog roboczy i rozpoczyna skanowanie.
        Ta metoda jest wywo≈Çywana z DirectoryTreeManagera.

        Args:
            folder_path: ≈öcie≈ºka do nowego katalogu roboczego
        """
        self.logger.info(f"Zmiana katalogu na: {folder_path} (bez resetu drzewa)")
        normalized_path = normalize_path(folder_path)

        if not self.main_window._validate_directory_path(normalized_path):
            return

        try:
            self.logger.debug("Rozpoczynam zmianƒô katalogu bez resetu drzewa...")
            self.main_window._show_progress(
                0, f"Skanowanie: {os.path.basename(normalized_path)}"
            )
            self.main_window.is_scanning = True

            # Uruchom skanowanie w tle
            scan_result = self.main_window.controller.scan_service.scan_directory(
                normalized_path, max_depth=0
            )
            # DIAGNOSTYKA
            self.logger.critical(
                f"DIAGNOSTYKA CHANGE_DIRECTORY: Otrzymano "
                f"{len(scan_result.special_folders)} folder√≥w specjalnych "
                f"ze skanera: {scan_result.special_folders}"
            )

            # Zatrzymaj spinner/progress bar
            self.main_window.is_scanning = False
            self.main_window._hide_progress()

            # Zaktualizuj stan kontrolera rƒôcznie
            self.main_window.controller.current_directory = normalized_path
            self.main_window.controller.current_file_pairs = scan_result.file_pairs
            self.main_window.controller.unpaired_archives = (
                scan_result.unpaired_archives
            )
            self.main_window.controller.unpaired_previews = (
                scan_result.unpaired_previews
            )
            self.main_window.controller.special_folders = scan_result.special_folders

            # üîß NAPRAWKA: Aktualizuj FileExplorerTab z nowym folderem
            if hasattr(self.main_window, "file_explorer_tab"):
                self.main_window.file_explorer_tab.set_root_path(normalized_path)
                self.logger.debug(
                    f"FileExplorerTab zaktualizowany folderem: {normalized_path}"
                )

            if scan_result.file_pairs:
                self.main_window.worker_manager.start_data_processing_worker_without_tree_reset(
                    scan_result.file_pairs
                )
            else:
                self.finish_folder_change_without_tree_reset()

        except Exception as scan_error:
            error_msg = f"B≈ÇƒÖd skanowania folderu: {scan_error}"
            self.logger.error(error_msg)
            self.main_window.show_error_message("B≈ÇƒÖd", error_msg)

    def finish_folder_change_without_tree_reset(self):
        """
        Ko≈Ñczy proces zmiany folderu, gdy nie ma par plik√≥w do przetworzenia,
        lub po zako≈Ñczeniu przetwarzania przez workera.
        Od≈õwie≈ºa widoki bez resetowania drzewa katalog√≥w.
        """
        self.logger.debug(
            "Finalizowanie zmiany folderu bez resetu drzewa - od≈õwie≈ºanie widok√≥w..."
        )
        self.main_window._hide_progress()

        # Zamiast pobieraƒá listƒô, po prostu wywo≈Çaj metodƒô, kt√≥ra zrobi wszystko
        self.main_window.data_manager.apply_filters_and_update_view()

        # Upewnij siƒô, ≈ºe foldery specjalne sƒÖ przekazywane
        if hasattr(self.main_window.controller, "special_folders"):
            self.main_window.gallery_manager.set_special_folders(
                self.main_window.controller.special_folders
            )
        else:
            self.logger.error(
                "DIAGNOSTYKA FINISH_FOLDER_CHANGE: Kontroler nie ma "
                "atrybutu special_folders!"
            )

        self.main_window._update_unpaired_files_direct()

        # Ukryj progress bar
        self.main_window._hide_progress()
        self.logger.debug("Zako≈Ñczono finalizowanie zmiany folderu bez resetu drzewa")
