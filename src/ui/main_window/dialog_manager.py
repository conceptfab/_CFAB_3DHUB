"""
DialogManager - centralne zarzƒÖdzanie oknami dialogowymi.
üöÄ ETAP 5 REFAKTORYZACJI: Wydzielenie logiki dialog√≥w z main_window.py
"""

import logging
import os

from PyQt6.QtCore import QTimer
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import QHBoxLayout, QLabel, QMessageBox, QTextEdit, QVBoxLayout

from src.models.file_pair import FilePair
from src.ui.widgets.preview_dialog import PreviewDialog


class DialogManager:
    """
    Manager odpowiedzialny za centralne zarzƒÖdzanie oknami dialogowymi.
    Standaryzuje wyglƒÖd, zachowanie i obs≈Çugƒô wszystkich dialog√≥w.
    """

    def __init__(self, main_window):
        """
        Inicjalizuje DialogManager.

        Args:
            main_window: Referencja do g≈Ç√≥wnego okna aplikacji
        """
        self.main_window = main_window
        self.logger = logging.getLogger(__name__)

    def show_preview_dialog(self, file_pair: FilePair):
        """
        Wy≈õwietla okno dialogowe z podglƒÖdem obrazu.

        Args:
            file_pair: Para plik√≥w do wy≈õwietlenia podglƒÖdu
        """
        preview_path = file_pair.get_preview_path()
        if not preview_path or not os.path.exists(preview_path):
            QMessageBox.warning(
                self.main_window,
                "Brak PodglƒÖdu",
                "Plik podglƒÖdu dla tego elementu nie istnieje.",
            )
            return

        try:
            pixmap = QPixmap(preview_path)
            if pixmap.isNull():
                raise ValueError("Nie uda≈Ço siƒô za≈Çadowaƒá obrazu do QPixmap.")

            dialog = PreviewDialog(pixmap, self.main_window)
            dialog.exec()

        except Exception as e:
            error_message = f"WystƒÖpi≈Ç b≈ÇƒÖd podczas ≈Çadowania podglƒÖdu: {e}"
            self.logger.error(error_message)
            QMessageBox.critical(self.main_window, "B≈ÇƒÖd PodglƒÖdu", error_message)

    def show_detailed_move_report(
        self, moved_pairs, detailed_errors, skipped_files, summary
    ):
        """
        Wy≈õwietla szczeg√≥≈Çowy raport z operacji przenoszenia plik√≥w.

        Args:
            moved_pairs: Lista pomy≈õlnie przeniesionych par
            detailed_errors: Szczeg√≥≈Çowe b≈Çƒôdy operacji
            skipped_files: Lista pominiƒôtych plik√≥w
            summary: Podsumowanie operacji
        """
        # Tworzenie dialogu z raportem
        dialog = QMessageBox(self.main_window)
        dialog.setWindowTitle("Raport Przenoszenia Plik√≥w")
        dialog.setIcon(QMessageBox.Icon.Information)

        # Tworzenie szczeg√≥≈Çowego tekstu raportu
        report_text = self._create_move_report_text(
            moved_pairs, detailed_errors, skipped_files, summary
        )

        # Ustawienie g≈Ç√≥wnej wiadomo≈õci
        main_message = (
            f"Operacja przenoszenia zako≈Ñczona.\n"
            f"Przeniesiono: {len(moved_pairs)} par plik√≥w\n"
            f"B≈Çƒôdy: {len(detailed_errors)}\n"
            f"Pominiƒôto: {len(skipped_files)}"
        )
        dialog.setText(main_message)

        # Dodanie szczeg√≥≈Ç√≥w je≈õli sƒÖ b≈Çƒôdy lub pominiƒôte pliki
        if detailed_errors or skipped_files:
            dialog.setDetailedText(report_text)

        # Wy≈õwietlenie dialogu
        dialog.exec()

    def _create_move_report_text(
        self, moved_pairs, detailed_errors, skipped_files, summary
    ):
        """
        Tworzy szczeg√≥≈Çowy tekst raportu z przenoszenia plik√≥w.

        Args:
            moved_pairs: Lista pomy≈õlnie przeniesionych par
            detailed_errors: Szczeg√≥≈Çowe b≈Çƒôdy operacji
            skipped_files: Lista pominiƒôtych plik√≥w
            summary: Podsumowanie operacji

        Returns:
            Sformatowany tekst raportu
        """
        report_lines = []

        # Podsumowanie
        if summary:
            report_lines.append("=== PODSUMOWANIE ===")
            for key, value in summary.items():
                report_lines.append(f"{key}: {value}")
            report_lines.append("")

        # Przeniesione pliki
        if moved_pairs:
            report_lines.append("=== POMY≈öLNIE PRZENIESIONE ===")
            for pair in moved_pairs[:10]:  # Poka≈º tylko pierwsze 10
                report_lines.append(f"‚úÖ {pair.get_base_name()}")
            if len(moved_pairs) > 10:
                report_lines.append(f"... i {len(moved_pairs) - 10} wiƒôcej")
            report_lines.append("")

        # B≈Çƒôdy
        if detailed_errors:
            report_lines.append("=== B≈ÅƒòDY ===")
            for error in detailed_errors[:20]:  # Poka≈º tylko pierwsze 20
                report_lines.append(f"‚ùå {error}")
            if len(detailed_errors) > 20:
                report_lines.append(f"... i {len(detailed_errors) - 20} wiƒôcej")
            report_lines.append("")

        # Pominiƒôte pliki
        if skipped_files:
            report_lines.append("=== POMINIƒòTE PLIKI ===")
            for file_path in skipped_files[:20]:  # Poka≈º tylko pierwsze 20
                report_lines.append(f"‚è≠Ô∏è {file_path}")
            if len(skipped_files) > 20:
                report_lines.append(f"... i {len(skipped_files) - 20} wiƒôcej")

        return "\n".join(report_lines)

    def show_error_message(self, title: str, message: str):
        """
        Pokazuje b≈ÇƒÖd u≈ºytkownikowi w standaryzowany spos√≥b.

        Args:
            title: Tytu≈Ç okna b≈Çƒôdu
            message: Tre≈õƒá komunikatu b≈Çƒôdu
        """
        QMessageBox.critical(self.main_window, title, message)

    def show_warning_message(self, title: str, message: str):
        """
        Pokazuje ostrze≈ºenie u≈ºytkownikowi w standaryzowany spos√≥b.

        Args:
            title: Tytu≈Ç okna ostrze≈ºenia
            message: Tre≈õƒá komunikatu ostrze≈ºenia
        """
        QMessageBox.warning(self.main_window, title, message)

    def show_info_message(self, title: str, message: str):
        """
        Pokazuje informacjƒô u≈ºytkownikowi w standaryzowany spos√≥b.

        Args:
            title: Tytu≈Ç okna informacji
            message: Tre≈õƒá komunikatu informacyjnego
        """
        QMessageBox.information(self.main_window, title, message)

    def confirm_action(self, title: str, message: str) -> bool:
        """
        Wy≈õwietla dialog potwierdzenia akcji.

        Args:
            title: Tytu≈Ç okna potwierdzenia
            message: Tre≈õƒá pytania do u≈ºytkownika

        Returns:
            True je≈õli u≈ºytkownik potwierdzi≈Ç, False w przeciwnym przypadku
        """
        reply = QMessageBox.question(
            self.main_window,
            title,
            message,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )
        return reply == QMessageBox.StandardButton.Yes

    def show_progress_info(self, title: str, message: str, auto_close_ms: int = None):
        """
        Wy≈õwietla informacjƒô o postƒôpie operacji.

        Args:
            title: Tytu≈Ç okna informacji
            message: Tre≈õƒá komunikatu o postƒôpie
            auto_close_ms: Automatyczne zamkniƒôcie po X milisekundach (opcjonalne)
        """
        info_box = QMessageBox(QMessageBox.Icon.Information, title, message)
        info_box.setParent(self.main_window)

        if auto_close_ms:
            # Automatyczne zamkniƒôcie po okre≈õlonym czasie
            QTimer.singleShot(auto_close_ms, info_box.close)

        info_box.exec()

    def show_custom_dialog(self, title: str, content_widget, modal: bool = True):
        """
        Wy≈õwietla niestandardowy dialog z dowolnym widgetem.

        Args:
            title: Tytu≈Ç okna dialogu
            content_widget: Widget do wy≈õwietlenia w dialogu
            modal: Czy dialog ma byƒá modalny

        Returns:
            Utworzony dialog
        """
        from PyQt6.QtWidgets import QDialog

        dialog = QDialog(self.main_window)
        dialog.setWindowTitle(title)
        dialog.setModal(modal)

        layout = QVBoxLayout(dialog)
        layout.addWidget(content_widget)

        return dialog
